
Linked List
1. Linked List Insertion.
2. Linked List Deletion.
3. To count a number of times a given integer occured in a node.
4. Reverse a linked list.
5. Detect a loop in linked list
6. Middle of a given linked list
7. To check if the singly linked list is a palindrome or not.
8.  



########################################################
01. Introduction to Data Structures
########################################################
--> A data structure is a way to store and organize data in a computer,	so 
that it can be used efficiently.

When we talk about data structures as 
--> Mathematical/Logical model or abstract data type
--> Implementation

Abstract data types
--> Defines data and operations but no implementation
Eg : Arrays, Linked Lists, Stacks, Queues, Trees, Graphs.

########################################################
02. Data Structure List as Abstract Data Types
########################################################




########################################################
03. Introduction to linked list
########################################################


########################################################
04 Data Structures Arrays vs Linked Lists
########################################################



########################################################
05 Linked List - Implementation in C-C++  
########################################################



########################################################
06 Linked List in C-C++ - Inserting a node at beginning
########################################################


########################################################
07 Linked List in C-C++ - Insert a node at nth position
########################################################


########################################################
08 Linked List in C-C++ - Delete a node at nth position
########################################################


########################################################
09 Reverse a linked list - Iterative method
########################################################


########################################################
10 Print elements of a linked list in forward and 
reverse order using recursion
########################################################


########################################################
11 Reverse a linked list using recursion
########################################################


########################################################
12 Data structures Introduction to Doubly Linked List
########################################################


########################################################
13 Doubly Linked List - Implementation in C-C++  
########################################################


########################################################
14 Data structures Introduction to stack
########################################################


########################################################
15 Data structures Array implementation of stacks
########################################################


########################################################
16 Data Structures Linked List implementation of stacks
########################################################


########################################################
17 Reverse a string or linked list using stack.
########################################################


########################################################
18 Check for balanced parentheses using stack
########################################################


########################################################
19 Infix, Prefix and Postfix
########################################################


########################################################
20 Evaluation of Prefix and Postfix expressions using stack
########################################################


########################################################
21 Infix to Postfix using stack
########################################################


########################################################
22 Data structures Introduction to Queues
########################################################


########################################################
23 Data structures Array implementation of Queue
########################################################


########################################################
24 Data structures Linked List implementation of Queue
########################################################


########################################################
25 Data structures Introduction to Trees
########################################################


########################################################
26 Data structures Binary Tree
########################################################


########################################################
27 Data structures Binary Search Tree
########################################################


########################################################
28 Binary search tree - Implementation in C-C++
########################################################


########################################################
29 BST implementation -  memory allocation in stack and heap
########################################################



########################################################
30 Find min and max element in a binary search tree
########################################################



########################################################
31 Find height of a binary tree
########################################################



########################################################
32 Binary tree traversal - breadth-first and depth-first strategies
########################################################



########################################################
33 Binary tree Level Order Traversal
########################################################



########################################################
34 Binary tree traversal Preorder, Inorder, Postorder
########################################################



########################################################
35 Check if a binary tree is binary search tree or not
########################################################



########################################################
36 Delete a node from Binary Search Tree
########################################################



########################################################
37 Inorder Successor in a binary search tree
########################################################




########################################################
38 Data structures Introduction to graphs
########################################################



########################################################
39 Data structures Properties of Graphs
########################################################




########################################################
40 Graph Representation part 01 - Edge List
########################################################




########################################################
41 Graph Representation part 02 - Adjacency Matrix
########################################################



########################################################
GeeksforGeeks - Singly Linked List
########################################################

########################################################
GeeksforGeeks - Circular Linked List
########################################################

########################################################
GeeksforGeeks - Doubly Linked List
########################################################

########################################################
GeeksforGeeks - Stack
########################################################

########################################################
GeeksforGeeks - Queue
########################################################

########################################################
GeeksforGeeks - Binary Tree
########################################################
Binary Tree structure :
struct node {
 int data;
 struct node *left;
 struct node *right;
};
-------------------------------------------------------------------
Create a binary tree node :
struct node *newNode(int data) {
 struct node *node = (struct node*) malloc (sizeof(struct node));
 node->data = data;
 node->left = NULL;
 node->right = NULL;
 return node;
}
-------------------------------------------------------------------
1. Depth First Traversals:
(a) Inorder
(b) Preorder
(c) Postorder

-------------------------------------------------------------------
(a) Inorder Traversal:
Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
Code :
 void printInorder(struct node *node) {
  if (node == NULL)
  return;
  
  printInorder(node->left);
  printf("%d \t",node->data);
  printInorder(node->right);
 }
Time Complexity: O(n)
------------------------------------------------------------------- 
(b) Preorder Traversal:
Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)
Code :
void printPreorder(struct node *node) {
 if(node == NULL)
 return;
 
 printf("%d \t",node->data);
 printPreorder(node->left);
 printPreorder(node->right);
}
Time Complexity: O(n)
-------------------------------------------------------------------

(c) Postorder Traversal:
Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.
Code :
 void printPostorder(struct node *node) {
  if (node == NULL)
   return ;
   
  printPostorder(node->left);
  printPostorder(node->right);
  printf("%d \t",node->data);
 }
Time Complexity: O(n)
-------------------------------------------------------------------

2. Size of Binary Tree
Algorithm:
size(tree)
1. If tree is empty then return 0
2. Else
     (a) Get the size of left subtree recursively  i.e., call 
          size( tree->left-subtree)
     (a) Get the size of right subtree recursively  i.e., call 
          size( tree->right-subtree)
     (c) Calculate size of the tree as following:
            tree_size  =  size(left-subtree) + size(right-
                               subtree) + 1
     (d) Return tree_size
Code :
int size(struct node *node) {
 if (node == NULL)
  return 0;
 else
  return(size(node->left) + 1 + size(node->right));
}
Time Complexity: O(n)
-------------------------------------------------------------------

3. Detemine if two tree are identical
Algorithm:
sameTree(tree1, tree2)
1. If both trees are empty then return 1.
2. Else If both trees are non -empty
     (a) Check data of the root nodes (tree1->data ==  tree2->data)
     (b) Check left subtrees recursively  i.e., call sameTree( 
          tree1->left_subtree, tree2->left_subtree)
     (c) Check right subtrees recursively  i.e., call sameTree( 
          tree1->right_subtree, tree2->right_subtree)
     (d) If a,b and c are true then return 1.
3  Else return 0 (one is empty and other is not)
Code :
/* Given two trees, return true if they are
 structurally identical */
int identicalTrees(struct node* a, struct node* b)
{
    /*1. both empty */
    if (a==NULL && b==NULL)
        return 1;
 
    /* 2. both non-empty -> compare them */
    if (a!=NULL && b!=NULL)
    {
        return
        (
            a->data == b->data &&
            identicalTrees(a->left, b->left) &&
            identicalTrees(a->right, b->right)
        );
    }
    
    /* 3. one empty, one not -> false */
    return 0;
}
Time Complexity : O(m) where m < n. where number of nodes 
in two trees be m and n
-------------------------------------------------------------------

########################################################
GeeksforGeeks - Binary Search Tree
########################################################

########################################################
GeeksforGeeks - Heap
########################################################

########################################################
GeeksforGeeks - Hashing
########################################################


########################################################
GeeksforGeeks - Graphs
########################################################


########################################################
GeeksforGeeks - Advanced Data Structure
########################################################


########################################################
GeeksforGeeks - Array
########################################################


########################################################
GeeksforGeeks - Matrix
########################################################


########################################################
GeeksforGeeks - Searching and Sorting
########################################################
1. Binary Search
Algorithm :
The idea of binary search is to use the information 
that the array is sorted and reduce the time complexity 
to O(Logn). We basically ignore half of the 
elements just after one comparison.
1) Compare x with the middle element.
2) If x matches with middle element, we return the mid index.
3) Else If x is greater than the mid element, 
then x can only lie in right half subarray after 
the mid element. So we recur for right half.
4) Else (x is smaller) recur for the left half.


A. Recursive C implementation of Binary Search
Code :
int binarySearch(int arr[], int l, int r, int x)
{
   if (r >= l)
   {
        int mid = l + (r - l)/2;
        if (arr[mid] == x)  return mid;
        if (arr[mid] > x) return binarySearch(arr, l, mid-1, x);
        return binarySearch(arr, mid+1, r, x);
   }
   return -1;
}
 
int main(void)
{
   int arr[] = {2, 3, 4, 10, 40};
   int n = sizeof(arr)/ sizeof(arr[0]);
   int x = 10;
   int result = binarySearch(arr, 0, n-1, x);
   (result == -1)? printf("Element is not present in array")
                 : printf("Element is present at index %d", result);
   return 0;
}

B. Iterative C implementation of Binary Search.
Code :
#include <stdio.h>
int binarySearch(int arr[], int l, int r, int x)
{
  while (l <= r)
  {
    int m = l + (r-l)/2;
 
    if (arr[m] == x) return m;  // Check if x is present at mid
 
    if (arr[m] < x) l = m + 1; // If x greater, ignore left half
 
    else r = m - 1; // If x is smaller, ignore right half
  }
  return -1; // if we reach here, then element was not present
}
 
int main(void)
{
   int arr[] = {2, 3, 4, 10, 40};
   int n = sizeof(arr)/ sizeof(arr[0]);
   int x = 10;
   int result = binarySearch(arr, 0, n-1, x);
   (result == -1)? printf("Element is not present in array")
                 : printf("Element is present at index %d", result);
   return 0;
}

Time Complexity :  O(Logn)
--------------------------------------------------------
2. Selection Sort
Algorithm :
The selection sort algorithm sorts an array by repeatedly 
finding the minimum element (considering ascending order) 
from unsorted part and putting it at the beginning.

Code :
#include <stdio.h>
 
void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void selectionSort(int arr[], int n)
{
    int i, j, min_idx;
    
    for (i = 0; i < n-1; i++)
    {
        min_idx = i;
        for (j = i+1; j < n; j++)
          if (arr[j] < arr[min_idx])
            min_idx = j;
            
        swap(&arr[min_idx], &arr[i]);
    }
}

void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
 
int main()
{
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr)/sizeof(arr[0]);
    selectionSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}

Time Complexity: O(n*n) as there are two nested loops.

Auxiliary Space: O(1)
--------------------------------------------------------
3. Bubble Sort
Algorithm :
Bubble Sort is the simplest sorting algorithm that 
works by repeatedly swapping the adjacent elements 
if they are in wrong order.

Code :
#include <stdio.h>

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort(int arr[], int n)
{
   int i, j;
   for (i = 0; i < n; i++)      
       for (j = 0; j < n-i-1; j++) //Last i elements are already in place  
           if (arr[j] > arr[j+1])
              swap(&arr[j], &arr[j+1]);
}

/* Function to print an array */
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}

Optimized Implementation:
#include <stdio.h>

void swap(int *xp, int *yp)
{
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void bubbleSort(int arr[], int n)
{
   int i, j;
   bool swapped;
   for (i = 0; i < n; i++)
   {
     swapped = false;
     for (j = 0; j < n-i-1; j++)
     {
        if (arr[j] > arr[j+1])
        {
           swap(&arr[j], &arr[j+1]);
           swapped = true;
        }
     }
     if (swapped == false)
        break;
   }
}

void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main()
{
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int n = sizeof(arr)/sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    printArray(arr, n);
    return 0;
}

Time Complexity: O(n*n)

Auxiliary Space: O(1)

Boundary Cases: Bubble sort takes minimum time (Order of n)
when elements are already sorted.

Sorting In Place: Yes

Stable: Yes

--------------------------------------------------------
4. Insertion Sort

--------------------------------------------------------
5. Merge Sort
Algorithm :
MergeSort(arr[], l,  r)
If r > l
     1. Find the middle point to divide the array into two halves:  
             middle m = (l+r)/2
     2. Call mergeSort for first half:   
             Call mergeSort(arr, l, m)
     3. Call mergeSort for second half:
             Call mergeSort(arr, m+1, r)
     4. Merge the two halves sorted in step 2 and 3:
             Call merge(arr, l, m, r)

Code :
/* C program for merge sort */
#include<stdlib.h>
#include<stdio.h>
 
/* Function to merge the two haves arr[l..m] and arr[m+1..r] of array arr[] */
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    /* create temp arrays */
    int L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the sub-array
  of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
 
 
/* UITLITY FUNCTIONS */
/* Function to print an array */
void printArray(int A[], int size)
{
    int i;
    for (i=0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}
 
/* Driver program to test above functions */
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
 
    printf("Given array is \n");
    printArray(arr, arr_size);
 
    mergeSort(arr, 0, arr_size - 1);
 
    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}
Time Complexity : O(nLogn)
--------------------------------------------------------
6. Heap Sort
--------------------------------------------------------
7. Quick Sort
--------------------------------------------------------
8. Bucket Sort
--------------------------------------------------------
9. Shell Sort
--------------------------------------------------------
########################################################
GeeksforGeeks - Greedy Algorithms
########################################################

########################################################
GeeksforGeeks - Dynamic Programming
########################################################

########################################################
GeeksforGeeks - Pattern Searching
########################################################

########################################################
GeeksforGeeks - Other String Algorithms
########################################################

########################################################
GeeksforGeeks - Backtracking
########################################################

########################################################
GeeksforGeeks - Divide and Conquer
########################################################

########################################################
GeeksforGeeks - Geometric Algorithms
########################################################

########################################################
GeeksforGeeks - Mathematical Algorithms
########################################################

########################################################
GeeksforGeeks - Bit Algorithms 
########################################################
1. Find the element that appears once
int getSingle(int arr[], int n)
{
    int ones = 0, twos = 0 ;
 
    int common_bit_mask;
 
    // Let us take the example of {3, 3, 2, 3} to understand this
    for( int i=0; i< n; i++ )
    {
        /* The expression "one & arr[i]" gives the bits that are
           there in both 'ones' and new element from arr[].  We
           add these bits to 'twos' using bitwise OR
 
           Value of 'twos' will be set as 0, 3, 3 and 1 after 1st,
           2nd, 3rd and 4th iterations respectively */
        twos  = twos | (ones & arr[i]);
 
 
        /* XOR the new bits with previous 'ones' to get all bits
           appearing odd number of times
 
           Value of 'ones' will be set as 3, 0, 2 and 3 after 1st,
           2nd, 3rd and 4th iterations respectively */
        ones  = ones ^ arr[i];
 
 
        /* The common bits are those bits which appear third time
           So these bits should not be there in both 'ones' and 'twos'.
           common_bit_mask contains all these bits as 0, so that the bits can 
           be removed from 'ones' and 'twos'   
 
           Value of 'common_bit_mask' will be set as 00, 00, 01 and 10
           after 1st, 2nd, 3rd and 4th iterations respectively */
        common_bit_mask = ~(ones & twos);
 
 
        /* Remove common bits (the bits that appear third time) from 'ones'
             
           Value of 'ones' will be set as 3, 0, 0 and 2 after 1st,
           2nd, 3rd and 4th iterations respectively */
        ones &= common_bit_mask;
 
 
        /* Remove common bits (the bits that appear third time) from 'twos'
 
           Value of 'twos' will be set as 0, 3, 1 and 0 after 1st,
           2nd, 3rd and 4th itearations respectively */
        twos &= common_bit_mask;
 
        // uncomment this code to see intermediate values
        //printf (" %d %d \n", ones, twos);
    }
 
    return ones;
}
Time Complexity: O(n)
Auxiliary Space: O(1)
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
--------------------------------------------------------
########################################################
GeeksforGeeks - Graph Algorithms
########################################################

########################################################
GeeksforGeeks - 
########################################################
########################################################
########################################################
########################################################
