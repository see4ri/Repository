Linked List
1. Linked List Insertion.
2. Linked List Deletion.
3. To count a number of times a given integer occured in a node.
4. Reverse a linked list.
5. Detect a loop in linked list
6. Middle of a given linked list
7. To check if the singly linked list is a palindrome or not.
8.  



########################################################
01. Introduction to Data Structures
########################################################
--> A data structure is a way to store and organize data in a computer,	so 
that it can be used efficiently.

When we talk about data structures as 
--> Mathematical/Logical model or abstract data type
--> Implementation

Abstract data types
--> Defines data and operations but no implementation
Eg : Arrays, Linked Lists, Stacks, Queues, Trees, Graphs.

########################################################
02. Data Structure List as Abstract Data Types
########################################################




########################################################
03. Introduction to linked list
########################################################


########################################################
04 Data Structures Arrays vs Linked Lists
########################################################



########################################################
05 Linked List - Implementation in C-C++  
########################################################



########################################################
06 Linked List in C-C++ - Inserting a node at beginning
########################################################


########################################################
07 Linked List in C-C++ - Insert a node at nth position
########################################################


########################################################
08 Linked List in C-C++ - Delete a node at nth position
########################################################


########################################################
09 Reverse a linked list - Iterative method
########################################################


########################################################
10 Print elements of a linked list in forward and 
reverse order using recursion
########################################################


########################################################
11 Reverse a linked list using recursion
########################################################


########################################################
12 Data structures Introduction to Doubly Linked List
########################################################


########################################################
13 Doubly Linked List - Implementation in C-C++  
########################################################


########################################################
14 Data structures Introduction to stack
########################################################


########################################################
15 Data structures Array implementation of stacks
########################################################


########################################################
16 Data Structures Linked List implementation of stacks
########################################################


########################################################
17 Reverse a string or linked list using stack.
########################################################


########################################################
18 Check for balanced parentheses using stack
########################################################


########################################################
19 Infix, Prefix and Postfix
########################################################


########################################################
20 Evaluation of Prefix and Postfix expressions using stack
########################################################


########################################################
21 Infix to Postfix using stack
########################################################


########################################################
22 Data structures Introduction to Queues
########################################################


########################################################
23 Data structures Array implementation of Queue
########################################################


########################################################
24 Data structures Linked List implementation of Queue
########################################################


########################################################
25 Data structures Introduction to Trees
########################################################


########################################################
26 Data structures Binary Tree
########################################################


########################################################
27 Data structures Binary Search Tree
########################################################


########################################################
28 Binary search tree - Implementation in C-C++
########################################################


########################################################
29 BST implementation -  memory allocation in stack and heap
########################################################



########################################################
30 Find min and max element in a binary search tree
########################################################



########################################################
31 Find height of a binary tree
########################################################



########################################################
32 Binary tree traversal - breadth-first and depth-first strategies
########################################################



########################################################
33 Binary tree Level Order Traversal
########################################################



########################################################
34 Binary tree traversal Preorder, Inorder, Postorder
########################################################



########################################################
35 Check if a binary tree is binary search tree or not
########################################################



########################################################
36 Delete a node from Binary Search Tree
########################################################



########################################################
37 Inorder Successor in a binary search tree
########################################################




########################################################
38 Data structures Introduction to graphs
########################################################



########################################################
39 Data structures Properties of Graphs
########################################################




########################################################
40 Graph Representation part 01 - Edge List
########################################################




########################################################
41 Graph Representation part 02 - Adjacency Matrix
########################################################






########################################################
GeeksforGeeks - Binary Tree
########################################################
Binary Tree structure :
struct node {
 int data;
 struct node *left;
 struct node *right;
};

Create a binary tree node :
struct node *newNode(int data) {
 struct node *node = (struct node*) malloc (sizeof(struct node));
 node->data = data;
 node->left = NULL;
 node->right = NULL;
 return node;
}

1. Depth First Traversals:
(a) Inorder
(b) Preorder
(c) Postorder


(a) Inorder Traversal:
Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
code :
 void printInorder(struct node *node) {
  if (node == NULL)
  return;
  
  printInorder(node->left);
  printf("%
 }
   

(b) Preorder Traversal:
Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)

(c) Postorder Traversal:
Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.


########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
